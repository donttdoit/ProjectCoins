//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerHandler"",
            ""id"": ""7cc0e6f4-dceb-4b0e-ae6d-3ca6dd998487"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""849d76b1-b676-4d69-a601-322af11b24bb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""777103bf-1473-4bb9-a363-4612f9d62782"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f9043c4c-21b3-4891-9579-c78ce489bd31"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""209456d0-f5b5-44a7-868e-69a2382a7ea1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cb3e0520-0f06-48a8-873a-0b823c9248fb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2365d54f-9ef5-47ad-8d3b-75d01cefd3b1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d7ed4492-8cdb-4285-b03a-23d85fc88ce1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""81ca877a-28ab-45da-94f9-6c2b81dbfbdd"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerHandler
        m_PlayerHandler = asset.FindActionMap("PlayerHandler", throwIfNotFound: true);
        m_PlayerHandler_Movement = m_PlayerHandler.FindAction("Movement", throwIfNotFound: true);
        m_PlayerHandler_Interact = m_PlayerHandler.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerHandler
    private readonly InputActionMap m_PlayerHandler;
    private IPlayerHandlerActions m_PlayerHandlerActionsCallbackInterface;
    private readonly InputAction m_PlayerHandler_Movement;
    private readonly InputAction m_PlayerHandler_Interact;
    public struct PlayerHandlerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerHandlerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerHandler_Movement;
        public InputAction @Interact => m_Wrapper.m_PlayerHandler_Interact;
        public InputActionMap Get() { return m_Wrapper.m_PlayerHandler; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerHandlerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerHandlerActions instance)
        {
            if (m_Wrapper.m_PlayerHandlerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerHandlerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerHandlerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerHandlerActionsCallbackInterface.OnMovement;
                @Interact.started -= m_Wrapper.m_PlayerHandlerActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerHandlerActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerHandlerActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_PlayerHandlerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public PlayerHandlerActions @PlayerHandler => new PlayerHandlerActions(this);
    public interface IPlayerHandlerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
